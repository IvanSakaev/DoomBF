===== Это полноценная структура кода на brainfuck =====
[
Вся программа представляет собой N инструкций и M блоков кода.

Сначала программа извлекает номер блока из стека если он есть.
Если его нет, программа выполняет инструкцию.
Потом программа циклично проходит по всем блокам и для каждого проверяет, должен ли он выполнится.
Выполняется один блок.
Блок может в конце записать значение в стек.
Все повторяется.

1я ячейка всегда хранит 1. Для выхода из программы нужно задать ей 0.
2я ячейка содержит номер текущей инструкции.
3я и 4я ячейки зарезервированы под if not.
! if not использует 3ю и 4ю ячейку не только из 2ой, но и из 5ой
5я ячейка указывает, какой фрагмент должен выполняться. 0 - никакой, 1 - первый и т.д

6я ячейка - регистр A, с ней выполняются все операции и результат сохраняется в нее.
7я ячейка - регистр B, с ней выполняются все операции.
8я и 9я ячейки используются для операций с регистрами, после использования должны очищаться.

10я ячейка - номер блока, который нужно добавить в стек после 11го. ПОКА НЕ ИСПОЛЬЗУЕТСЯ!
11я ячейка - номер блока, который нужно добваить в стек.
12я ячейка - адрес последней незанятой ячейки в стеке. Если в ней 0 - стек пуст.
13я, 14я и 15я ячейки используются для операций со стеком.
Ячейки с 16ой по S+15 - стек
                        Он нужен, чтобы реализовывать вызов блока с возвратом и без него.
                        Для вызова блока без возврата нужно просто поместить его адрес в стек.
                            Рекурсия разрешена, но ее можно использовать только в режиме работы без возврата, чтобы избежать переполнение стека.
                        Для вызова блока с возвратом нужно поместить в стек:
                            - адрес блока, в который должен произвестись возврат
                            - адрес блока, который нужно вызвать
                            Исходная функция разбивается на 2 блока, а функция, которую нужно вызвать, помещается в 3ий блок.
                            1ый блок записывает в стек сначала 2, потом 3.
                            Таким образом, сначала вызовется нужная функция (блок 3), а потом продолжит выполняться исходная (блок 2).
                        Адрес блока, который нужно вызвать, помещается в 10ю ячейку.
                        А адрес блока, в который должен произвестись возврат, помещается в 11ю ячейку.
                        НЕЛЬЗЯ редактировать стек вручную.

Переменные:
Перед изменением переменной проверьте все вхождения переменной.
Все места, где нужно что-либо изменить при изменении переменной, отмечены в комментариях.
N = 7       - количество инструкций
M = 5       - количество различных блоков кода
S = 8       - размер стека
]


+[>
    ========== Выполняем push в стек ==========
    Обработка 11ой ячейки
    >>>>>>>>>
    [>
        >[-]>[-]<<
        [>+>+<<-]>>[<<->>+]<    Копирование 12ой ячейки в 13ю
        Перемещение значения из 11ой ячейки в стек:
        Следующих строк ровно S
         >[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >           +   <               <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>          +   <<              <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>         +   <<<             <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>        +   <<<<            <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>       +   <<<<<           <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>>      +   <<<<<<          <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>>>     +   <<<<<<<         <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>>>>    +   <<<<<<<<        <<<<]>>        >]<
        [-]<+   Увеличиваем значение 12ой ячейки
    <[#]]

    Обработка 10ой ячейки
    <
    [>>
        >[-]>[-]<<
        [>+>+<<-]>>[<<->>+]<    Копирование 12ой ячейки в 13ю
        Перемещение значения из 10ой ячейки в стек:
        Следующих строк ровно S
         >[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >           +   <           <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>          +   <<          <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>         +   <<<         <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>        +   <<<<        <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>       +   <<<<<       <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>>      +   <<<<<<      <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>>>     +   <<<<<<<     <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>>>>    +   <<<<<<<<    <<<<<]>>>        >]<
        [-]<+   Увеличиваем значение 12ой ячейки
    <<[#]]

    ========== Выполняем pop из стека ==========
    >>                                  Переход на 12ю ячейку
    [>+>+<<-]>>[<<+>>-]<                Копирование 12ой ячейки в 13ю и переходим в нее
    [                                   Выполнять pop только если в стеке есть данные
        -<->                            Уменьшаем значение 12ой и 13ой ячейки
        Копирование из стека в 5ю ячейку:
        Следующих строк ровно S
         >[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >           [-   <              <<<<<<<<<<+>>>>>>>>>>      >           ]     <                 <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>          [-   <<             <<<<<<<<<<+>>>>>>>>>>      >>          ]     <<                <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>         [-   <<<            <<<<<<<<<<+>>>>>>>>>>      >>>         ]     <<<               <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>        [-   <<<<           <<<<<<<<<<+>>>>>>>>>>      >>>>        ]     <<<<              <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>       [-   <<<<<          <<<<<<<<<<+>>>>>>>>>>      >>>>>       ]     <<<<<             <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>>      [-   <<<<<<         <<<<<<<<<<+>>>>>>>>>>      >>>>>>      ]     <<<<<<            <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>>>     [-   <<<<<<<        <<<<<<<<<<+>>>>>>>>>>      >>>>>>>     ]     <<<<<<<           <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>>>>    [-   <<<<<<<<       <<<<<<<<<<+>>>>>>>>>>      >>>>>>>>    ]     <<<<<<<<          <<    >]<
    [-]]
    <<<<<<<<                            Переход на 5ю ячейку


    ========== Инструкции: ==========
    <[-]+<[-]+>>[<-<->]<[<-]>[->        Выполняем инструкции только если из стека не достали номер блока
        <<<+                            Переход на 2ю ячейку
        Они выполняются по очереди
        Они должны только выбирать блок кода который выполнится в эту итерацию
        Значение в 5ой ячейке указывает на то какой блок по номеру надо запустить
        Инструкции НЕ могут иметь более сложную логику для выбора блока кода
        Инструкции начинают выполнение на 5ой ячейке и должны завершиться на ней же
        Инструкций должно быть ровно M
            Инструкции начинаются здесь |              | А заканчиваются здесь
                                        V              V
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>      +           <<<++++++++>]<   Плюсов после всех стрелочек должно быть ровно на один больше чем M
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>      ++          <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>      ++++        <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<

        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <->         >]<     После всех операций осуществляется выход из программы
                                                                В будущем лучше сделать выход отдельным блоком программы
                                                                А в случае если все инструкции выполнились начинать выполнять их с первой
        >>>                             Возврат на 5ю ячейку
    <[-]]>


    ========== Блоки кода: ==========
    Выполнение каждого блока начинается на 5ой ячейке и должно заканчиваться там же
    Блоков кода должно быть ровно N
    Блоки являются функциями за исключением того что
     = из середины блока нельзя вызвать другой блок
       это обходится тем что надо создать 2 блока и 1ый может указать какие блоки будут выполняться
       надо указать 3ий и 2ой
       тогда вызовется 3ий блок а потом выполнение вернется ко второму
     = блок не принимает аргументов
     = блок не может вернуть значение

    Блок 1      Инициализация чисел в 25ой и 26ой ячейке
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>>>>>>>>>>>>>>>>>>>+++++++>++++<<<<<<<<<<<<<<<<<<<<<
    <]>

    Блок 2      Перемещения чисел из ячеек 25 и 26 в регистры A и B
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >
        >>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<<<<<
        >
        >>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<<<<<
        <<
        >>>>>+++++>+++<<<<<<    Это указывает что после этого блока должен выполниться 5ый
                                А после 5го будет выполняться 3й
                                И только потом начнут выполнение инструкции
                                Этот блок как бы вызывает 5й с возвратом в 3й
    <]>

    Блок 3      Перемещение числа из регистра A в 26ю ячейку
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >[>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<-]<
    <]>

    Блок 4      Вывод
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>>>>>>>>>>>>>>>>>>>[-]++++++++[>++++++++<-]>+.[-]<[-]<<<<<<<<<<<<<<<<<<<<
    <]>

    Блок 5      Добавление B к A
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>[>+>+<<-]>>[<<+>>-]<[<<+>>-]<<<
    <]>

    [-]<<<
<]
