===== Это полноценная структура кода на brainfuck =====
[
Вся программа представляет собой N инструкций и M блоков кода.

Сначала программа извлекает номер блока из стека если он не пустой.
Если стек пустой, программа выполняет инструкцию.
Потом программа циклично проходит по всем блокам и для каждого проверяет, должен ли он выполнится.
Выполняется один блок.
Блок может в конце записать до 2х значений в стек.
Все повторяется.

1я ячейка всегда хранит 1. Для выхода из программы нужно задать ей 0.
2я ячейка содержит номер текущей инструкции.
3я и 4я ячейки зарезервированы под if not.
! if not использует 3ю и 4ю ячейку не только из 2ой, но и из 5ой
5я ячейка указывает, какой фрагмент должен выполняться. 0 - никакой, 1 - первый и т.д

6я ячейка - регистр A, с ней выполняются все операции и результат сохраняется в нее.
7я ячейка - регистр B, с ней выполняются все операции.
8я, 9я, 10я и 11я ячейки используются для операций с регистрами, после использования должны очищаться в ноль.

12я ячейка - номер блока, который нужно добавить в стек после 11го. ПОКА НЕ ИСПОЛЬЗУЕТСЯ!
13я ячейка - номер блока, который нужно добваить в стек.
14я ячейка - адрес последней незанятой ячейки в стеке. Если в ней 0 - стек пуст.
15я, 16я и 17я ячейки используются для операций со стеком.
Ячейки с 18ой по S+17 - стек
                        Он нужен, чтобы реализовывать вызов блока с возвратом и без него.
                        Для вызова блока без возврата нужно просто поместить его адрес в стек.
                            Рекурсия разрешена, но ее можно использовать только в режиме работы без возврата, чтобы избежать переполнение стека.
                        Для вызова блока с возвратом нужно поместить в стек:
                            - адрес блока, в который должен произвестись возврат
                            - адрес блока, который нужно вызвать
                            Исходная функция разбивается на 2 блока, а функция, которую нужно вызвать, помещается в 3ий блок.
                            1ый блок записывает в стек сначала 2, потом 3.
                            Таким образом, сначала вызовется нужная функция (блок 3), а потом продолжит выполняться исходная (блок 2).
                        Адрес блока, который нужно вызвать, помещается в 10ю ячейку.
                        А адрес блока, в который должен произвестись возврат, помещается в 11ю ячейку.
                        НЕЛЬЗЯ редактировать стек вручную.

Переменные:
Перед изменением переменной проверьте все вхождения переменной.
Все места, где нужно что-либо изменить при изменении переменной, отмечены в комментариях.
N = 7       - количество инструкций
M = 10      - количество различных блоков кода
S = 8       - размер стека
]


+[>
    ========== Выполняем push в стек ==========
    Обработка 13ой ячейки
    >>>>>>>>>>>
    [>
        >[-]>[-]<<
        [>+>+<<-]>>[<<->>+]<    Копирование 14ой ячейки в 15ю
        Перемещение значения из 13ой ячейки в стек:
        Следующих строк ровно S
         >[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >           +   <               <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>          +   <<              <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>         +   <<<             <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>        +   <<<<            <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>       +   <<<<<           <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>>      +   <<<<<<          <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>>>     +   <<<<<<<         <<<<]>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <<[->>>>    >>>>>>>>    +   <<<<<<<<        <<<<]>>        >]<
        [-]<+   Увеличиваем значение 14ой ячейки
    <[#]]

    Обработка 12ой ячейки
    <
    [>>
        >[-]>[-]<<
        [>+>+<<-]>>[<<->>+]<    Копирование 14ой ячейки в 15ю
        Перемещение значения из 12ой ячейки в стек:
        Следующих строк ровно S
         >[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >           +   <           <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>          +   <<          <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>         +   <<<         <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>        +   <<<<        <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>       +   <<<<<       <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>>      +   <<<<<<      <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>>>     +   <<<<<<<     <<<<<]>>>        >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<      <<<[->>>>>   >>>>>>>>    +   <<<<<<<<    <<<<<]>>>        >]<
        [-]<+   Увеличиваем значение 14ой ячейки
    <<[#]]

    ========== Выполняем pop из стека ==========
    >>                                  Переход на 14ю ячейку
    [>+>+<<-]>>[<<+>>-]<                Копирование 14ой ячейки в 15ю и переход в нее
    [                                   Выполнять pop только если в стеке есть данные
        -<->                            Уменьшаем значение 14ой и 15ой ячейки
        Копирование из стека в 5ю ячейку:
        Следующих строк ровно S
         >[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >           [-   <              <<<<<<<<<<<<+>>>>>>>>>>>>      >           ]     <                 <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>          [-   <<             <<<<<<<<<<<<+>>>>>>>>>>>>      >>          ]     <<                <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>         [-   <<<            <<<<<<<<<<<<+>>>>>>>>>>>>      >>>         ]     <<<               <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>        [-   <<<<           <<<<<<<<<<<<+>>>>>>>>>>>>      >>>>        ]     <<<<              <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>       [-   <<<<<          <<<<<<<<<<<<+>>>>>>>>>>>>      >>>>>       ]     <<<<<             <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>>      [-   <<<<<<         <<<<<<<<<<<<+>>>>>>>>>>>>      >>>>>>      ]     <<<<<<            <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>>>     [-   <<<<<<<        <<<<<<<<<<<<+>>>>>>>>>>>>      >>>>>>>     ]     <<<<<<<           <<    >]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       >>  >>>>>>>>    [-   <<<<<<<<       <<<<<<<<<<<<+>>>>>>>>>>>>      >>>>>>>>    ]     <<<<<<<<          <<    >]<
    [-]]
    <<<<<<<<<<                            Переход на 5ю ячейку


    ========== Инструкции: ==========
    <[-]+<[-]+>>[<-<->]<[<-]>[->        Выполняем инструкции только если из стека не достали номер блока
        <<<+                            Переход на 2ю ячейку
        Они выполняются по очереди
        Они должны только выбирать блок кода который выполнится в эту итерацию
        Значение в 5ой ячейке указывает на то какой блок по номеру надо запустить
        Инструкции НЕ могут иметь более сложную логику для выбора блока кода
        Инструкции начинают выполнение на 5ой ячейке и должны завершиться на ней же
        Инструкций должно быть ровно N
            Инструкции начинаются здесь |              | А заканчиваются здесь
                                        V              V
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>      +           <<<++++++++>]<   Плюсов после всех стрелочек должно быть ровно на один больше чем N
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>      ++          <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>      ++++        <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<
        ->[-]+>[-]+<<[>->-<]>[>-]<[->>                  <<<++++++++>]<

        ->[-]+>[-]+<<[>->-<]>[>-]<[-<       <->         >]<     После всех операций осуществляется выход из программы
                                                                В будущем лучше сделать выход отдельным блоком программы
                                                                А в случае если все инструкции выполнились начинать выполнять их с первой
        >>>                             Возврат на 5ю ячейку
    <[-]]>


    ========== Блоки кода: ==========
    Выполнение каждого блока начинается на 5ой ячейке и должно заканчиваться там же
    Блоков кода должно быть ровно M
    Блоки являются функциями за исключением того что
     = из середины блока нельзя вызвать другой блок
       это обходится тем что надо создать 2 блока и 1ый может указать какие блоки будут выполняться
       надо указать 3ий и 2ой
       тогда вызовется 3ий блок а потом выполнение вернется ко второму
     = блок не принимает аргументов
     = блок не может вернуть значение

=   Блок 1      Инициализация чисел в 26ой и 27ой ячейке
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>>>>>>>>>>>>>>>>>>>>++++++>++++<<<<<<<<<<<<<<<<<<<<<<
    <]>

=   Блок 2      Перемещения чисел из ячеек 26 и 27 в регистры A и B
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >
        >>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<<<<<<
        >
        >>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>-]<<<<<<<<<<<<<<<<<<<<
        <<
        >>>>>>>++++++++>+++<<<<<<<<     Это указывает что после этого блока должен выполниться 6ой
                                        А после 6го будет выполняться 3й
                                        И только потом начнут выполнение инструкции
                                        Этот блок как бы вызывает 6ой с возвратом в 3й
    <]>

=   Блок 3      Перемещение числа из регистра A в 27ю ячейку
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >[>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<-]<
    <]>

=   Блок 4      Вывод
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>>>>>>>>>>>>>>>>>>>>[-]++++++++[>++++++++<-]>+.[-]<[-]<<<<<<<<<<<<<<<<<<<<<
    <]>

=== Вспомогательные блоки ===

=   Блок 5      A = не A (результат: 0 или 1)
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>>+<<[>>-<<[-]]>>[<<+>>-]<<<
    <]>

=   Блок 6      A = A плюс B
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>[<+>>+<-]>[<+>-]<<<
    <]>

=   Блок 7      А = А минус B
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>[<->>+<-]>[<+>-]<<<
    <]>

=   Блок 8      A = A * B
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >[>>+<<-]>>[<[<+>>>+<<-]>>[<<+>>-]<-]<<<
    <]>

=   Блок 9      A = A // B      B = A % B
    -<[-]+<[-]+>>[<-<->]<[<-]>[->
        >>[>+<-]<[>+<-]>    B to C ; A to B
        Теперь надо A = B // C
    <]>

    [-]<<<
<]
